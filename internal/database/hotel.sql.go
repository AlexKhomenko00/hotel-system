// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: hotel.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createHotel = `-- name: CreateHotel :one
INSERT INTO
	booking.hotels (id, name, location)
VALUES
	($1, $2, $3)
RETURNING
	id, name, location, created_at, updated_at, deleted_at
`

type CreateHotelParams struct {
	ID       uuid.UUID `json:"id"`
	Name     string    `json:"name"`
	Location string    `json:"location"`
}

func (q *Queries) CreateHotel(ctx context.Context, arg CreateHotelParams) (BookingHotel, error) {
	row := q.db.QueryRowContext(ctx, createHotel, arg.ID, arg.Name, arg.Location)
	var i BookingHotel
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Location,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteHotel = `-- name: DeleteHotel :exec
UPDATE booking.hotels
SET
	deleted_at = CURRENT_TIMESTAMP
WHERE
	id = $1
`

func (q *Queries) DeleteHotel(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteHotel, id)
	return err
}

const getHotelById = `-- name: GetHotelById :one
SELECT
	id, name, location, created_at, updated_at, deleted_at
FROM
	booking.hotels
WHERE
	id = $1
`

func (q *Queries) GetHotelById(ctx context.Context, id uuid.UUID) (BookingHotel, error) {
	row := q.db.QueryRowContext(ctx, getHotelById, id)
	var i BookingHotel
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Location,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getHotelByName = `-- name: GetHotelByName :one
SELECT
	id, name, location, created_at, updated_at, deleted_at
FROM
	booking.hotels
WHERE
	name = $1
`

func (q *Queries) GetHotelByName(ctx context.Context, name string) (BookingHotel, error) {
	row := q.db.QueryRowContext(ctx, getHotelByName, name)
	var i BookingHotel
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Location,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateHotel = `-- name: UpdateHotel :one
UPDATE booking.hotels
SET
	name = $2,
	location = $3,
	updated_at = CURRENT_TIMESTAMP
WHERE
	id = $1
RETURNING id, name, location, created_at, updated_at, deleted_at
`

type UpdateHotelParams struct {
	ID       uuid.UUID `json:"id"`
	Name     string    `json:"name"`
	Location string    `json:"location"`
}

func (q *Queries) UpdateHotel(ctx context.Context, arg UpdateHotelParams) (BookingHotel, error) {
	row := q.db.QueryRowContext(ctx, updateHotel, arg.ID, arg.Name, arg.Location)
	var i BookingHotel
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Location,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
