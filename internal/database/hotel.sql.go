// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: hotel.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createHotel = `-- name: CreateHotel :one
INSERT INTO
	booking.hotels (id, name, location)
VALUES
	($1, $2, $3)
RETURNING
	id, name, location, created_at, updated_at, deleted_at, is_active
`

type CreateHotelParams struct {
	ID       uuid.UUID `json:"id"`
	Name     string    `json:"name"`
	Location string    `json:"location"`
}

func (q *Queries) CreateHotel(ctx context.Context, arg CreateHotelParams) (BookingHotel, error) {
	row := q.db.QueryRowContext(ctx, createHotel, arg.ID, arg.Name, arg.Location)
	var i BookingHotel
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Location,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.IsActive,
	)
	return i, err
}

const createRoom = `-- name: CreateRoom :one
INSERT INTO
	booking.rooms (id, hotel_id, room_type_id, name, description, number, floor, created_at, updated_at, status)
VALUES
	($1, $2, $3, $4, $5, $6, $7, NOW(), NOW(), $8)
RETURNING
	id, hotel_id, room_type_id, status, name, description, number, floor, created_at, updated_at
`

type CreateRoomParams struct {
	ID          uuid.UUID         `json:"id"`
	HotelID     uuid.UUID         `json:"hotel_id"`
	RoomTypeID  uuid.UUID         `json:"room_type_id"`
	Name        string            `json:"name"`
	Description sql.NullString    `json:"description"`
	Number      int32             `json:"number"`
	Floor       int32             `json:"floor"`
	Status      BookingRoomStatus `json:"status"`
}

func (q *Queries) CreateRoom(ctx context.Context, arg CreateRoomParams) (BookingRoom, error) {
	row := q.db.QueryRowContext(ctx, createRoom,
		arg.ID,
		arg.HotelID,
		arg.RoomTypeID,
		arg.Name,
		arg.Description,
		arg.Number,
		arg.Floor,
		arg.Status,
	)
	var i BookingRoom
	err := row.Scan(
		&i.ID,
		&i.HotelID,
		&i.RoomTypeID,
		&i.Status,
		&i.Name,
		&i.Description,
		&i.Number,
		&i.Floor,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createRoomType = `-- name: CreateRoomType :one
INSERT INTO
	booking.room_types (id, hotel_id, name, description)
VALUES
	($1, $2, $3, $4)
RETURNING
	id, hotel_id, name, description, created_at, updated_at
`

type CreateRoomTypeParams struct {
	ID          uuid.UUID      `json:"id"`
	HotelID     uuid.UUID      `json:"hotel_id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
}

func (q *Queries) CreateRoomType(ctx context.Context, arg CreateRoomTypeParams) (BookingRoomType, error) {
	row := q.db.QueryRowContext(ctx, createRoomType,
		arg.ID,
		arg.HotelID,
		arg.Name,
		arg.Description,
	)
	var i BookingRoomType
	err := row.Scan(
		&i.ID,
		&i.HotelID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteHotel = `-- name: DeleteHotel :exec
UPDATE booking.hotels
SET
	deleted_at = CURRENT_TIMESTAMP
WHERE
	id = $1
`

func (q *Queries) DeleteHotel(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteHotel, id)
	return err
}

const deleteRoomType = `-- name: DeleteRoomType :exec
UPDATE booking.room_types
SET
	deleted_at = CURRENT_TIMESTAMP
WHERE
	id = $1
	AND hotel_id = $2
`

type DeleteRoomTypeParams struct {
	ID      uuid.UUID `json:"id"`
	HotelID uuid.UUID `json:"hotel_id"`
}

func (q *Queries) DeleteRoomType(ctx context.Context, arg DeleteRoomTypeParams) error {
	_, err := q.db.ExecContext(ctx, deleteRoomType, arg.ID, arg.HotelID)
	return err
}

const findRoomTypesByHotelIdAndName = `-- name: FindRoomTypesByHotelIdAndName :one
SELECT
	id, hotel_id, name, description, created_at, updated_at
FROM
	booking.room_types
WHERE
	hotel_id = $1
	AND name = $2
`

type FindRoomTypesByHotelIdAndNameParams struct {
	HotelID uuid.UUID `json:"hotel_id"`
	Name    string    `json:"name"`
}

func (q *Queries) FindRoomTypesByHotelIdAndName(ctx context.Context, arg FindRoomTypesByHotelIdAndNameParams) (BookingRoomType, error) {
	row := q.db.QueryRowContext(ctx, findRoomTypesByHotelIdAndName, arg.HotelID, arg.Name)
	var i BookingRoomType
	err := row.Scan(
		&i.ID,
		&i.HotelID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getActiveHotels = `-- name: GetActiveHotels :many
SELECT
	id, name, location, created_at, updated_at, deleted_at, is_active
FROM
	booking.hotels
WHERE
	is_active
`

func (q *Queries) GetActiveHotels(ctx context.Context) ([]BookingHotel, error) {
	rows, err := q.db.QueryContext(ctx, getActiveHotels)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BookingHotel
	for rows.Next() {
		var i BookingHotel
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Location,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getHotelById = `-- name: GetHotelById :one
SELECT
	id, name, location, created_at, updated_at, deleted_at, is_active
FROM
	booking.hotels
WHERE
	id = $1
`

func (q *Queries) GetHotelById(ctx context.Context, id uuid.UUID) (BookingHotel, error) {
	row := q.db.QueryRowContext(ctx, getHotelById, id)
	var i BookingHotel
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Location,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.IsActive,
	)
	return i, err
}

const getHotelByName = `-- name: GetHotelByName :one
SELECT
	id, name, location, created_at, updated_at, deleted_at, is_active
FROM
	booking.hotels
WHERE
	name = $1
`

func (q *Queries) GetHotelByName(ctx context.Context, name string) (BookingHotel, error) {
	row := q.db.QueryRowContext(ctx, getHotelByName, name)
	var i BookingHotel
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Location,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.IsActive,
	)
	return i, err
}

const getHotelUniqueRoomTypes = `-- name: GetHotelUniqueRoomTypes :many
SELECT DISTINCT
	id
FROM
	booking.room_types
WHERE
	hotel_id = $1
`

func (q *Queries) GetHotelUniqueRoomTypes(ctx context.Context, hotelID uuid.UUID) ([]uuid.UUID, error) {
	rows, err := q.db.QueryContext(ctx, getHotelUniqueRoomTypes, hotelID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var id uuid.UUID
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRoomTypeByIdAndHotelId = `-- name: GetRoomTypeByIdAndHotelId :one
SELECT
	id, hotel_id, name, description, created_at, updated_at
FROM
	booking.room_types
WHERE
	id = $1
	AND hotel_id = $2
`

type GetRoomTypeByIdAndHotelIdParams struct {
	ID      uuid.UUID `json:"id"`
	HotelID uuid.UUID `json:"hotel_id"`
}

func (q *Queries) GetRoomTypeByIdAndHotelId(ctx context.Context, arg GetRoomTypeByIdAndHotelIdParams) (BookingRoomType, error) {
	row := q.db.QueryRowContext(ctx, getRoomTypeByIdAndHotelId, arg.ID, arg.HotelID)
	var i BookingRoomType
	err := row.Scan(
		&i.ID,
		&i.HotelID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateHotel = `-- name: UpdateHotel :one
UPDATE booking.hotels
SET
	name = $2,
	location = $3,
	updated_at = CURRENT_TIMESTAMP
WHERE
	id = $1
RETURNING
	id, name, location, created_at, updated_at, deleted_at, is_active
`

type UpdateHotelParams struct {
	ID       uuid.UUID `json:"id"`
	Name     string    `json:"name"`
	Location string    `json:"location"`
}

func (q *Queries) UpdateHotel(ctx context.Context, arg UpdateHotelParams) (BookingHotel, error) {
	row := q.db.QueryRowContext(ctx, updateHotel, arg.ID, arg.Name, arg.Location)
	var i BookingHotel
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Location,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.IsActive,
	)
	return i, err
}

const updateRoomType = `-- name: UpdateRoomType :one
UPDATE booking.room_types
SET
	name = $3,
	description = $4,
	updated_at = CURRENT_TIMESTAMP
WHERE
	id = $1
	AND hotel_id = $2
RETURNING
	id, hotel_id, name, description, created_at, updated_at
`

type UpdateRoomTypeParams struct {
	ID          uuid.UUID      `json:"id"`
	HotelID     uuid.UUID      `json:"hotel_id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
}

func (q *Queries) UpdateRoomType(ctx context.Context, arg UpdateRoomTypeParams) (BookingRoomType, error) {
	row := q.db.QueryRowContext(ctx, updateRoomType,
		arg.ID,
		arg.HotelID,
		arg.Name,
		arg.Description,
	)
	var i BookingRoomType
	err := row.Scan(
		&i.ID,
		&i.HotelID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
