// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: reservation.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const getReservationById = `-- name: GetReservationById :one
SELECT
	id, hotel_id, room_type_id, start_date, end_date, status, guest_id, updated_at, created_at
FROM
	booking.reservations
WHERE
	id = $1
`

func (q *Queries) GetReservationById(ctx context.Context, id uuid.UUID) (BookingReservation, error) {
	row := q.db.QueryRowContext(ctx, getReservationById, id)
	var i BookingReservation
	err := row.Scan(
		&i.ID,
		&i.HotelID,
		&i.RoomTypeID,
		&i.StartDate,
		&i.EndDate,
		&i.Status,
		&i.GuestID,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const insertReservation = `-- name: InsertReservation :one
INSERT INTO
	booking.reservations (
		id,
		hotel_id,
		room_type_id,
		start_date,
		end_date,
		status,
		guest_id,
		updated_at,
		created_at
	)
VALUES
	(
		$1,
		$2,
		$3,
		$4,
		$5,
		$6,
		$7,
		CURRENT_TIMESTAMP,
		CURRENT_TIMESTAMP
	)
RETURNING
	id
`

type InsertReservationParams struct {
	ID         uuid.UUID `json:"id"`
	HotelID    uuid.UUID `json:"hotel_id"`
	RoomTypeID uuid.UUID `json:"room_type_id"`
	StartDate  time.Time `json:"start_date"`
	EndDate    time.Time `json:"end_date"`
	Status     string    `json:"status"`
	GuestID    uuid.UUID `json:"guest_id"`
}

func (q *Queries) InsertReservation(ctx context.Context, arg InsertReservationParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, insertReservation,
		arg.ID,
		arg.HotelID,
		arg.RoomTypeID,
		arg.StartDate,
		arg.EndDate,
		arg.Status,
		arg.GuestID,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}
