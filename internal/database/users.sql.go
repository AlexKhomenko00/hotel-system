// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT
	id, email, password_hash, created_at, updated_at, deleted_at, guest_id
FROM
	auth.users
WHERE
	email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (AuthUser, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i AuthUser
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.GuestID,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT
	id, email, password_hash, created_at, updated_at, deleted_at, guest_id
FROM
	auth.users
WHERE
	id = $1
LIMIT
	1
`

func (q *Queries) GetUserById(ctx context.Context, id uuid.UUID) (AuthUser, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i AuthUser
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.GuestID,
	)
	return i, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO
	auth.users (id, email, password_hash, guest_id)
VALUES
	($1, $2, $3, $4)
RETURNING
	id, email, password_hash, created_at, updated_at, deleted_at, guest_id
`

type InsertUserParams struct {
	ID           uuid.UUID `json:"id"`
	Email        string    `json:"email"`
	PasswordHash string    `json:"password_hash"`
	GuestID      uuid.UUID `json:"guest_id"`
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (AuthUser, error) {
	row := q.db.QueryRowContext(ctx, insertUser,
		arg.ID,
		arg.Email,
		arg.PasswordHash,
		arg.GuestID,
	)
	var i AuthUser
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.GuestID,
	)
	return i, err
}
